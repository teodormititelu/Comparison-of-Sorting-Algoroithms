{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP9iZzWA6eZt6/Qkr0Ts6nY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/teodormititelu/Comparison-of-Sorting-Algoroithms/blob/main/labeled_company_list.csv\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The task of this project is to classify business taxonomies, relevant to the insurance industry, by analysing a few fields of information: 'description', 'business_tags', 'sector', 'category', 'niche' and classifying each business into one or more labels"
      ],
      "metadata": {
        "id": "ZMVP1a30Naau"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In my opinion, the complexity of this task comes exactly from the fact that we do not have any previous information or any label relations, leaving the model to automate the entire process. For better real use-case precision, we would like to train a model on labeled data. Some improvements to this problem would surely be to label data manually (very hard in this case because of the very large pool of labels (220) and the multi-label option) or even active learning or semi-supervised learning.\n",
        "\n",
        "After careful thought and research, I concluded that some simple but not very good approach would be to analyze similarity between words from the data and labels, and a much more comprehensive solution to use models to semantically analyze the text and understand context.\n",
        "\n",
        "For starting, I preprocessed the data to eliminate punctuation, correct grammar if needed, eliminate stop words, and lemmatize words to their root form. Taking into consideration that all labels have 2â€“3 words in their composition, I also thought about augmenting the labels by adding synonyms for better semantic coverage of the business information. However, the method I used seemed to heavily lose the context of labels and performed poorly. I still think that this could be a good approach with more research and finding a way to add words without losing context.\n",
        "\n",
        "After that, I vectorized the data using a TF-IDF vectorizer and found that cosine similarity is a good metric for text semantic similarity, analyzed the results to find a good similarity threshold, and got pretty good results.\n",
        "\n",
        "After that, I tried different methods of clustering the data using k-means and found that to get better text similarity, you could still keep the cosine metric and create a spherical k-means algorithm. I tried implementing a spherical k-means and later found that the Euclidean metric from k-means is equivalent to the cosine metric if the points are normalized such that the Euclidean norm is 1. I tried to find a way to bond labels with clusters and started from the labels as centroids, later taking results as the labels from the same cluster as the data or the closest label if there is no label in the cluster. I am aware this is not the best approach, and for later development of the approach, I think a method of soft clustering should be found.\n",
        "\n",
        "I also tried a diagonal covariance model for GMM with spherical distribution, but it performed poorly.\n",
        "\n",
        "Later, I thought about training word2vec vectorization on the data to better represent semantic values of words in context and tried different approaches of combining the two vectorizations (for example, concatenating the features or weighting them, which performed okay but showed no substantial improvement). Then, I got the best precision on word2vec embedding multiplied by the IDF value of the word (rarity of the word) and scaled by a weight representing the vocabulary imbalance (business_vocab/label_vocab) if the word is part of the label vocabulary, to add more weight to words present in the labels.\n",
        "\n",
        "I am sure that better precision could be reached by training the word2vec or other word embedding model on web-scraped data from places with similar kinds of information or from large databases.\n",
        "\n",
        "Those were the approaches I tried for solving this task without using any pretrained models, knowing that pretrained language models would perform great on the task by their capacity of understanding context and semantic features. For the last approach, I used a light BERT model that would not crash my session. This method must also be optimized for the task.\n",
        "\n",
        "For the results I combined the results from similarity computing and from clustering."
      ],
      "metadata": {
        "id": "StieSAYMPF1K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "ml_insurance = \"tm_ml_insurance_challenge\"\n",
        "ml_insurance_id = \"1PWVbyh2VqrgRvttBPn_AOrYlGSU8h3Wh7XWvJCoWwIg\"\n",
        "\n",
        "insurance_taxonomy = \"tm_insurance_taxonomy\"\n",
        "insurance_taxonomy_id = \"1TXJGL1PNx6L46YlfOpLY6fc0CjWZrVbuKpE62lnnNtw\"\n",
        "\n",
        "ml_insurance_url = f\"https://docs.google.com/spreadsheets/d/{ml_insurance_id}/gviz/tq?tqx=out:csv&sheet={ml_insurance}\"\n",
        "insurance_taxonomy_url = f\"https://docs.google.com/spreadsheets/d/{insurance_taxonomy_id}/gviz/tq?tqx=out:csv&sheet={insurance_taxonomy}\"\n",
        "\n",
        "business_data = initial_data = pd.read_csv(ml_insurance_url, dtype=str )\n",
        "business_data.columns = initial_data.columns = ['description', 'business_tags', 'sector', 'category', 'niche']\n",
        "taxonomy_labels = pd.read_csv(insurance_taxonomy_url, dtype=str )\n",
        "\n",
        "preprocessed_labels = taxonomy_labels"
      ],
      "metadata": {
        "collapsed": true,
        "id": "QVKBEH7FHZLg"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from textblob import TextBlob\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from collections import Counter\n",
        "from nltk.corpus import wordnet as wn\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "def RemovePunctuation( text ):\n",
        "  if isinstance( text, str ) != True:\n",
        "    #replacing nan values\n",
        "    return \"\"\n",
        "\n",
        "  return re.sub(r'[^a-zA-Z\\s]', '', text).lower()\n",
        "\n",
        "def RemoveStopwords( text ):\n",
        "  if isinstance( text, str ) != True:\n",
        "    #replacing nan values\n",
        "    return \"\"\n",
        "\n",
        "  stopwords_list = stopwords.words('english')\n",
        "\n",
        "  new_text = []\n",
        "\n",
        "  for word in text.split():\n",
        "    if word not in stopwords_list:\n",
        "      new_text.append( word )\n",
        "\n",
        "  return \" \".join( new_text )\n",
        "\n",
        "def LemmatizeText( text ):\n",
        "\n",
        "  word_tokenizer = nltk.tokenize.WhitespaceTokenizer()\n",
        "  lemmatizer = nltk.stem.WordNetLemmatizer()\n",
        "\n",
        "  return \" \".join([lemmatizer.lemmatize( word ) for word in word_tokenizer.tokenize( text )])\n",
        "\n",
        "def TrimVocabulary( data, min_frequency, key_words={}):\n",
        "  text = \" \".join(business_data.apply(lambda row: ' '.join(row), axis=1))\n",
        "  words = text.split()\n",
        "  word_frequency = Counter( words )\n",
        "\n",
        "  def filter_words( text ):\n",
        "    filtered_text = []\n",
        "\n",
        "    for word in text.split():\n",
        "      if (word in key_words) or (word_frequency[word] >= min_frequency):\n",
        "        filtered_text.append( word )\n",
        "\n",
        "    return \" \".join( filtered_text )\n",
        "\n",
        "  data = data.map( filter_words )\n",
        "  return data\n",
        "\n",
        "def SemanticCoverage( data ):\n",
        "\n",
        "  def get_synonyms( text ):\n",
        "    synonyms = set()\n",
        "\n",
        "    for word in text.split():\n",
        "      for syn in wn.synsets(word):\n",
        "          for lemma in syn.lemmas():\n",
        "              synonyms.add(lemma.name())\n",
        "\n",
        "    return \" \".join( synonyms )\n",
        "\n",
        "  data = data.map( get_synonyms )\n",
        "  return data\n",
        "\n",
        "def DataPreprocessing( data ):\n",
        "  data = data.map( RemovePunctuation )\n",
        "  #data = data.map( lambda x: TextBlob(x).correct().string )\n",
        "  data = data.map( RemoveStopwords )\n",
        "  data = data.map( LemmatizeText )\n",
        "  return data\n",
        "\n",
        "taxonomy_labels = DataPreprocessing( taxonomy_labels )\n",
        "#taxonomy_labels = SemanticCoverage( taxonomy_labels)\n",
        "labels_vocab = set( [word for label in taxonomy_labels['label'].tolist() for word in label.split()] )\n",
        "\n",
        "business_data = DataPreprocessing( business_data )\n",
        "business_info_untrimmed = business_data.apply(lambda row: \" \".join(row), axis=1)\n",
        "business_data = TrimVocabulary( business_data, 150, labels_vocab )\n",
        "\n",
        "business_data['business_info'] = business_data.apply(lambda row: \" \".join(row), axis=1)\n",
        "business_vocab = set( [word for business_info in business_data['business_info'].tolist() for word in business_info.split()] )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9AvU-ywvi4VK",
        "outputId": "e7e6b4d2-232e-4ca0-d718-5b442a2deaf4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print( len(business_vocab) )\n",
        "print( len(labels_vocab) )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZxdgMnVNm2I3",
        "outputId": "7443ab83-e4df-499a-a771-4357e58f9f0e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "943\n",
            "259\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gensim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vadjMPUmvGIz",
        "outputId": "87fee2aa-4ba0-46b4-aff9-611d7e0e3a4a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gensim in /usr/local/lib/python3.11/dist-packages (4.3.3)\n",
            "Requirement already satisfied: numpy<2.0,>=1.18.5 in /usr/local/lib/python3.11/dist-packages (from gensim) (1.26.4)\n",
            "Requirement already satisfied: scipy<1.14.0,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from gensim) (1.13.1)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.11/dist-packages (from gensim) (7.1.0)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open>=1.8.1->gensim) (1.17.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from gensim.models import Word2Vec\n",
        "from nltk.tokenize import word_tokenize\n",
        "import nltk\n",
        "\n",
        "nltk.download('punkt_tab')\n",
        "\n",
        "tokenized_data = [word_tokenize(description) for description in business_data['business_info'].tolist()]\n",
        "tokenized_labels = [word_tokenize(label) for label in taxonomy_labels['label'].tolist()]\n",
        "sentences = tokenized_data + tokenized_labels\n",
        "\n",
        "w2v_size = 100\n",
        "w2v_embedding = Word2Vec(sentences=sentences, vector_size=w2v_size, window=5, workers=4)\n",
        "\n",
        "vectorizer = TfidfVectorizer( sublinear_tf=True, smooth_idf=False)\n",
        "vectorizer.fit( pd.concat([business_data['business_info'], taxonomy_labels['label']], axis=0) )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "collapsed": true,
        "id": "qOflyJrX3hwC",
        "outputId": "a4262369-7cdd-4200-a597-f63cac5e81c3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TfidfVectorizer(smooth_idf=False, sublinear_tf=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>TfidfVectorizer(smooth_idf=False, sublinear_tf=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>TfidfVectorizer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html\">?<span>Documentation for TfidfVectorizer</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>TfidfVectorizer(smooth_idf=False, sublinear_tf=True)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import normalize\n",
        "import numpy as np\n",
        "\n",
        "def label_weight( word ):\n",
        "  if word in labels_vocab:\n",
        "    return len(business_vocab)/len(labels_vocab)\n",
        "  return 1\n",
        "\n",
        "tfidf_vocab = dict(zip(vectorizer.get_feature_names_out(), vectorizer.idf_))\n",
        "\n",
        "business_w2v = np.array( [np.mean([w2v_embedding.wv[word] * tfidf_vocab[word] * label_weight(word) for word in word_tokenize(business_info) if word in w2v_embedding.wv], axis=0)\n",
        "                         for business_info in business_data['business_info'].tolist()], dtype=object)\n",
        "taxonomy_w2v = np.array( [np.mean([w2v_embedding.wv[word] * tfidf_vocab[word] * label_weight(word) for word in label if word in w2v_embedding.wv], axis = 0 )\n",
        "                         for label in tokenized_labels], dtype=object)\n",
        "\n",
        "business_tfidf = vectorizer.transform( business_data['business_info'] )\n",
        "taxonomy_tfidf = vectorizer.transform( taxonomy_labels['label'] )\n",
        "\n",
        "#business_features = np.concatenate([business_w2v, business_tfidf.toarray()], axis = 1)\n",
        "#taxonomy_features = np.concatenate([taxonomy_w2v, taxonomy_tfidf.toarray()], axis = 1)\n",
        "business_features = business_w2v\n",
        "taxonomy_features = taxonomy_w2v\n"
      ],
      "metadata": {
        "id": "d5VAnqmCzrdy"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print( business_w2v.shape )\n",
        "print( business_tfidf.shape )\n",
        "print( business_features.shape )\n",
        "print( taxonomy_tfidf.shape )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YlbRYY7WAt27",
        "outputId": "2301f1a7-8454-4c05-dd25-17158d328486"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(9494, 100)\n",
            "(9494, 944)\n",
            "(9494, 100)\n",
            "(220, 944)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "similarity_matrix = cosine_similarity(business_features, taxonomy_features)"
      ],
      "metadata": {
        "id": "-TFah4pM9Z1Z"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#similarity_threshold = 0.2 for similarity on tf-idf\n",
        "\n",
        "def compute_labels(similarity_matrix, similarity_threshold=0.7, top_n = 5):\n",
        "  #retrieve the corresponding labels from the taxonomy\n",
        "\n",
        "  top_labels = np.argsort(similarity_matrix, axis=1)[:, -top_n:]\n",
        "  top_values = np.sort(similarity_matrix, axis=1)[:, -top_n:]\n",
        "\n",
        "  print( top_values[:10] )\n",
        "\n",
        "  assigned_labels = [[idx for idx,value in enumerate(labels_similarity) if value > similarity_threshold] for labels_similarity in similarity_matrix]\n",
        "\n",
        "  for idx, (label, top_label) in enumerate(zip(assigned_labels, top_labels[:, -1])):\n",
        "    if label == []:\n",
        "      assigned_labels[idx] = [top_label]\n",
        "\n",
        "  return [[preprocessed_labels['label'][index] for index in indexes] for indexes in assigned_labels]\n",
        "\n",
        "similarity_threshold = 0.71\n",
        "business_data['cosine_similarity_labels'] = compute_labels(similarity_matrix, similarity_threshold)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AlTQQVsvB1P2",
        "outputId": "0c3a6c6b-512d-46d5-df41-8120cb36e67b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.78896896 0.79107381 0.81443593 0.82608882 0.86599277]\n",
            " [0.70217455 0.70958673 0.74616766 0.78001122 0.81682538]\n",
            " [0.57170814 0.5779805  0.58703429 0.60641404 0.67550664]\n",
            " [0.68040258 0.698031   0.72926588 0.73773833 0.88360815]\n",
            " [0.58712215 0.59697274 0.62684145 0.65088313 0.71287359]\n",
            " [0.53603919 0.53837271 0.57823384 0.59874289 0.61265954]\n",
            " [0.69088369 0.6972701  0.70898734 0.73447258 0.75508412]\n",
            " [0.80671305 0.81065979 0.82915247 0.841978   0.89581833]\n",
            " [0.60372515 0.61404916 0.64049813 0.69720328 0.87567157]\n",
            " [0.50608921 0.5384333  0.62064573 0.6676492  0.69675964]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print( *[(label, info) for (label, info) in zip( business_data['cosine_similarity_labels'][:10].tolist(), business_data['business_info'][:10].tolist())], sep='\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gT_SB0Aog45D",
        "outputId": "a2b1f386-4d1a-4934-9db4-149620461bac"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(['Residential Driveway Construction', 'Commercial Driveway Construction', 'Fencing Construction Services', 'Sidewalk Construction Services', 'Residential Drainage Systems', 'Conveyor System Installation', 'High-Rise Signage Installation', 'Residential Communication Equipment Installation', 'Commercial Communication Equipment Installation', 'Dock and Pier Construction', 'Road and Highway Construction', 'Pipeline Construction Services', 'New Ground Pipeline Installation', 'Boiler Installation Services', 'Gas Installation Services', 'HVAC Installation and Service', 'Residential Electrical Services', 'High-Rise Foundation Construction', 'Masonry Construction Services', 'Infrastructure Excavation', 'Multi-Family Construction Services', 'Commercial Construction Services', 'Project Management Services'], 'civil engineering construction company specializes designing building network across offer solution gas water installation single contract design team designing water gas network network meter location development well project management provide custom solution take account asset every meet project expertise gas variety market category including residential commercial industrial project well construction service network design construction water installation fiber installation service civil engineering service heavy civil engineering construction')\n",
            "(['Dairy Production Services', 'Frozen Food Processing', 'Seed Processing Services'], 'vegetable specialist also known company based japan specializes sale vegetable business year offer collection vegetable recipe vegetable recipe collection online shop company owned farm farm farm offer variety vegetable product including also production cultivation customer limited company us experience production sale provide vegetable meet customer need also cultivation product requirement wholesale product iron product manufacturer manufacturing technology food beverage rice highquality iron rice wholesaler miscellaneous crop farming health wellness product agricultural medical practice based medicine production rice manufacturing fruit vegetable market store frozen fruit vegetable manufacturing')\n",
            "(['Dairy Production Services'], 'company offer range service product customer product handmade quality focus quality company product range includes fresh vegetable farm shop addition farm product also farm shop customer fresh coffee cake living form farm fresh coffee community engagement social opportunity fresh vegetable cake living handmade product fresh farm fresh product integrated farming community farming manufacturing farm agriculture production miscellaneous crop farming')\n",
            "(['Well Maintenance Services', 'Boiler Repair Services', 'Restoration Services'], 'auto body shop located province company specializes providing auto body repair service automotive body repair service interior repair service service auto body shop automotive body paint interior repair maintenance')\n",
            "(['Event Planning Services'], 'cultural establishment located popular level offering variety activity event establishment cultural activity accommodation service rental small product tourism service recreational activity cultural center service boat tour transportation water')\n",
            "(['Food Processing Services'], 'company specializes benefit individual business structure three large company food sector year experience extensive knowledge field company aim market quality service customer employee benefit food program offer wide network establishment provides employee healthy food option card travel app allows user card well daily healthy food option establishment daily service benefit payment solution benefit generation food card personalized benefit strategy service payment processing sale financial processing activity')\n",
            "(['Environmental Consulting', 'Compliance Services'], 'company provides personalized industrial general management service water compliance need offer specialist meet need smart account service include water plan onsite monitoring implementation plan site also provide customized inspection form meet facility need founded compliance expert experience various industry transportation metal fabrication scrap metal plastic film food processing oil gas wood mill provide solution ensure requirement additionally offer smart data report report report source control inspection event form management state water board smart service environmental engineering service environmental consulting service')\n",
            "(['Fencing Construction Services', 'Sidewalk Construction Services', 'Conveyor System Installation', 'Low-Rise Signage Installation', 'High-Rise Signage Installation', 'Dock and Pier Construction', 'HVAC Installation and Service', 'Elevator Installation Services', 'Precast Concrete Installation', 'Tilt-Up Concrete Services', 'Masonry Construction Services', 'Drywall Services', 'Tile Installation Services', 'Carpentry Services', 'Insulation Services', 'Flooring Installation Services', 'Waterproofing Services', 'Multi-Family Construction Services', 'Asphalt Production Services'], 'form ltd company based specializing supply concrete product cut sheet installation service manufacturer full installation video concrete product manufacturing light service installation guide construction material manufacturing light manufacturing building material manufacturer wood member manufacturing')\n",
            "(['Paper Production Services'], 'company specializes production distribution packaging material including cardboard wholesale packaging packaging supply also offer packaging service packaging solution wholesale package packaging wholesale paper cardboard product industrial personal service paper merchant wholesaler')\n",
            "(['Catering Services'], 'event company restaurant supply store located india company specializes providing supply restaurant event management service event organization service restaurant supply store wholesale restaurant equipment commercial equipment merchant wholesaler')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from scipy.sparse import vstack\n",
        "\n",
        "business_features = normalize( business_features, norm = 'l2', axis = 1)\n",
        "taxonomy_features = normalize( taxonomy_features, norm = 'l2', axis = 1)\n",
        "\n",
        "taxonomy_centroids = initial_centroids = taxonomy_features  # Converting to numpy array (centroids)\n",
        "\n",
        "# Step 4: Perform K-means clustering with these initial centroids\n",
        "kmeans = KMeans(n_clusters=len(taxonomy_labels), init=initial_centroids, max_iter=100, verbose=1)\n",
        "\n",
        "kmeans.fit( vstack([taxonomy_features, business_features]) )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 778
        },
        "collapsed": true,
        "id": "f_Ex1QnS-yvP",
        "outputId": "85ee2dfb-bb9d-410b-ba02-0740dfd0db01"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initialization complete\n",
            "Iteration 0, inertia 4062.3570067305545.\n",
            "Iteration 1, inertia 2324.9368921619957.\n",
            "Iteration 2, inertia 2210.5063279427927.\n",
            "Iteration 3, inertia 2159.4676368401397.\n",
            "Iteration 4, inertia 2127.56886367977.\n",
            "Iteration 5, inertia 2107.909308427236.\n",
            "Iteration 6, inertia 2097.685231236295.\n",
            "Iteration 7, inertia 2089.778827950638.\n",
            "Iteration 8, inertia 2083.4320262860674.\n",
            "Iteration 9, inertia 2077.4589397692475.\n",
            "Iteration 10, inertia 2071.8538232628375.\n",
            "Iteration 11, inertia 2067.398207779149.\n",
            "Iteration 12, inertia 2063.7121345927044.\n",
            "Iteration 13, inertia 2060.826014299688.\n",
            "Iteration 14, inertia 2058.4098088598034.\n",
            "Iteration 15, inertia 2056.2020589017748.\n",
            "Iteration 16, inertia 2054.1427886246775.\n",
            "Iteration 17, inertia 2052.3742466534864.\n",
            "Iteration 18, inertia 2051.3889299711423.\n",
            "Iteration 19, inertia 2050.490023889824.\n",
            "Iteration 20, inertia 2049.8647249201167.\n",
            "Iteration 21, inertia 2049.1871099843274.\n",
            "Iteration 22, inertia 2048.770850308305.\n",
            "Iteration 23, inertia 2048.5625098034943.\n",
            "Iteration 24, inertia 2048.419443864598.\n",
            "Iteration 25, inertia 2048.31260308205.\n",
            "Iteration 26, inertia 2048.2040597401015.\n",
            "Iteration 27, inertia 2048.1981632358006.\n",
            "Converged at iteration 27: strict convergence.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(init=array([[-0.03327953,  0.19652282,  0.00493145, ...,  0.02875478,\n",
              "         0.08488442,  0.02445421],\n",
              "       [ 0.02267516,  0.13729685, -0.06365887, ..., -0.01090541,\n",
              "         0.13005489, -0.02945079],\n",
              "       [ 0.02471616,  0.13402561,  0.00912132, ..., -0.11869605,\n",
              "         0.04669733,  0.06812323],\n",
              "       ...,\n",
              "       [ 0.15693632,  0.13286675, -0.02804938, ...,  0.04706141,\n",
              "        -0.10700558, -0.08221516],\n",
              "       [ 0.12457315,  0.13837833,  0.04646964, ..., -0.02710327,\n",
              "        -0.1421418 , -0.05807499],\n",
              "       [ 0.16893585,  0.12527011, -0.0045193 , ..., -0.01873961,\n",
              "        -0.15451189, -0.03823296]]),\n",
              "       max_iter=100, n_clusters=220, verbose=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(init=array([[-0.03327953,  0.19652282,  0.00493145, ...,  0.02875478,\n",
              "         0.08488442,  0.02445421],\n",
              "       [ 0.02267516,  0.13729685, -0.06365887, ..., -0.01090541,\n",
              "         0.13005489, -0.02945079],\n",
              "       [ 0.02471616,  0.13402561,  0.00912132, ..., -0.11869605,\n",
              "         0.04669733,  0.06812323],\n",
              "       ...,\n",
              "       [ 0.15693632,  0.13286675, -0.02804938, ...,  0.04706141,\n",
              "        -0.10700558, -0.08221516],\n",
              "       [ 0.12457315,  0.13837833,  0.04646964, ..., -0.02710327,\n",
              "        -0.1421418 , -0.05807499],\n",
              "       [ 0.16893585,  0.12527011, -0.0045193 , ..., -0.01873961,\n",
              "        -0.15451189, -0.03823296]]),\n",
              "       max_iter=100, n_clusters=220, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KMeans</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(init=array([[-0.03327953,  0.19652282,  0.00493145, ...,  0.02875478,\n",
              "         0.08488442,  0.02445421],\n",
              "       [ 0.02267516,  0.13729685, -0.06365887, ..., -0.01090541,\n",
              "         0.13005489, -0.02945079],\n",
              "       [ 0.02471616,  0.13402561,  0.00912132, ..., -0.11869605,\n",
              "         0.04669733,  0.06812323],\n",
              "       ...,\n",
              "       [ 0.15693632,  0.13286675, -0.02804938, ...,  0.04706141,\n",
              "        -0.10700558, -0.08221516],\n",
              "       [ 0.12457315,  0.13837833,  0.04646964, ..., -0.02710327,\n",
              "        -0.1421418 , -0.05807499],\n",
              "       [ 0.16893585,  0.12527011, -0.0045193 , ..., -0.01873961,\n",
              "        -0.15451189, -0.03823296]]),\n",
              "       max_iter=100, n_clusters=220, verbose=1)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.spatial.distance import cdist\n",
        "\n",
        "cluster_labels = []\n",
        "for cluster_id in range( kmeans.n_clusters ):\n",
        "    # Get indices of points in the cluster\n",
        "    indices = np.argwhere(kmeans.labels_[:len(taxonomy_labels)] == cluster_id).flatten()  # Call flatten() here\n",
        "\n",
        "    if( len(indices) > 0):\n",
        "      cluster_labels.append( indices )\n",
        "    else:\n",
        "      cluster_centroid = kmeans.cluster_centers_[ cluster_id ]\n",
        "      distances = cdist([cluster_centroid], taxonomy_centroids, metric='euclidean')\n",
        "      closest_label = np.argmin( distances )\n",
        "      cluster_labels.append( [closest_label] )\n",
        "\n",
        "\n",
        "    #to do if cluster has no label\n",
        "\n",
        "business_data['cluster_kmeans_labels'] = [[preprocessed_labels['label'][index] for index in cluster_labels[cluster]]\n",
        "                                             for cluster in kmeans.labels_[len(taxonomy_labels):]]"
      ],
      "metadata": {
        "id": "CjSEYPfrp7GH"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print( *[(label, info) for (label, info) in zip( business_data['cluster_kmeans_labels'][:10].tolist(), business_data['business_info'][:10].tolist())], sep='\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bhjIGb5livyn",
        "outputId": "fa4a8e7b-e375-4a04-9ee3-b4d9477f59b6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(['New Ground Pipeline Installation'], 'civil engineering construction company specializes designing building network across offer solution gas water installation single contract design team designing water gas network network meter location development well project management provide custom solution take account asset every meet project expertise gas variety market category including residential commercial industrial project well construction service network design construction water installation fiber installation service civil engineering service heavy civil engineering construction')\n",
            "(['Frozen Food Processing'], 'vegetable specialist also known company based japan specializes sale vegetable business year offer collection vegetable recipe vegetable recipe collection online shop company owned farm farm farm offer variety vegetable product including also production cultivation customer limited company us experience production sale provide vegetable meet customer need also cultivation product requirement wholesale product iron product manufacturer manufacturing technology food beverage rice highquality iron rice wholesaler miscellaneous crop farming health wellness product agricultural medical practice based medicine production rice manufacturing fruit vegetable market store frozen fruit vegetable manufacturing')\n",
            "(['Pet Food Manufacturing'], 'company offer range service product customer product handmade quality focus quality company product range includes fresh vegetable farm shop addition farm product also farm shop customer fresh coffee cake living form farm fresh coffee community engagement social opportunity fresh vegetable cake living handmade product fresh farm fresh product integrated farming community farming manufacturing farm agriculture production miscellaneous crop farming')\n",
            "(['Well Maintenance Services', 'Boiler Repair Services'], 'auto body shop located province company specializes providing auto body repair service automotive body repair service interior repair service service auto body shop automotive body paint interior repair maintenance')\n",
            "(['Sports Management Services'], 'cultural establishment located popular level offering variety activity event establishment cultural activity accommodation service rental small product tourism service recreational activity cultural center service boat tour transportation water')\n",
            "(['Food Safety Services'], 'company specializes benefit individual business structure three large company food sector year experience extensive knowledge field company aim market quality service customer employee benefit food program offer wide network establishment provides employee healthy food option card travel app allows user card well daily healthy food option establishment daily service benefit payment solution benefit generation food card personalized benefit strategy service payment processing sale financial processing activity')\n",
            "(['Environmental Consulting'], 'company provides personalized industrial general management service water compliance need offer specialist meet need smart account service include water plan onsite monitoring implementation plan site also provide customized inspection form meet facility need founded compliance expert experience various industry transportation metal fabrication scrap metal plastic film food processing oil gas wood mill provide solution ensure requirement additionally offer smart data report report report source control inspection event form management state water board smart service environmental engineering service environmental consulting service')\n",
            "(['Precast Concrete Installation'], 'form ltd company based specializing supply concrete product cut sheet installation service manufacturer full installation video concrete product manufacturing light service installation guide construction material manufacturing light manufacturing building material manufacturer wood member manufacturing')\n",
            "(['Paper Production Services'], 'company specializes production distribution packaging material including cardboard wholesale packaging packaging supply also offer packaging service packaging solution wholesale package packaging wholesale paper cardboard product industrial personal service paper merchant wholesaler')\n",
            "(['Event Planning Services'], 'event company restaurant supply store located india company specializes providing supply restaurant event management service event organization service restaurant supply store wholesale restaurant equipment commercial equipment merchant wholesaler')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "initial_data['insurance_label'] = [list(set(cosine_labels + cluster_labels)) for cosine_labels, cluster_labels in zip(business_data['cosine_similarity_labels'],business_data['cluster_kmeans_labels'])]\n",
        "\n",
        "initial_data.to_csv('labeled_company_list.csv', index=False)"
      ],
      "metadata": {
        "id": "pwsHU8FMJ6GN"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install transformers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "35opggt75twd",
        "outputId": "5c5c99f3-cd9c-43b7-a073-a65b49fa9845"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.48.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.17.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.28.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import BertTokenizer, BertModel\n",
        "import torch\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "tokenizer = BertTokenizer.from_pretrained('cross-encoder/ms-marco-TinyBERT-L2-v2')\n",
        "model = BertModel.from_pretrained('cross-encoder/ms-marco-TinyBERT-L2-v2')\n",
        "\n",
        "inputs = tokenizer(business_data['business_info'].tolist(), return_tensors='pt', padding=True)\n",
        "\n",
        "with torch.no_grad():\n",
        "    outputs = model(**inputs)\n",
        "\n",
        "business_embeddings = outputs.last_hidden_state.mean(dim=1).numpy()\n",
        "\n",
        "inputs_labels = tokenizer(taxonomy_labels['label'].tolist(), return_tensors='pt', padding=True)\n",
        "with torch.no_grad():\n",
        "    outputs_labels = model(**inputs_labels)\n",
        "\n",
        "taxonomy_embeddings = outputs_labels.last_hidden_state.mean(dim=1).numpy()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QjhbPTUQ4yM8",
        "outputId": "56e55dad-de0d-4d7d-e185-240e8d33c402"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "similarity_matrix = cosine_similarity(business_embeddings, taxonomy_embeddings)\n",
        "\n",
        "similarity_threshold = 0.815\n",
        "business_data['bert_labels'] = compute_labels(similarity_matrix, similarity_threshold=similarity_threshold)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzOZ7u8a5hRk",
        "outputId": "40c33818-c984-451d-d06a-247e9ba24a36"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.8107803  0.8166215  0.81734294 0.81761235 0.8210315 ]\n",
            " [0.7832486  0.7865393  0.7875385  0.7892     0.7930648 ]\n",
            " [0.77567786 0.7787182  0.7798817  0.7918763  0.8014099 ]\n",
            " [0.77747923 0.7837628  0.78564054 0.79145616 0.79281193]\n",
            " [0.72971874 0.72973394 0.73371863 0.73743653 0.74702257]\n",
            " [0.76858395 0.7694222  0.77078915 0.771364   0.7741409 ]\n",
            " [0.81162006 0.8156502  0.82111716 0.82123506 0.85536957]\n",
            " [0.80215764 0.80370814 0.8106004  0.81776243 0.82748014]\n",
            " [0.7659528  0.76631206 0.7705095  0.771658   0.7916788 ]\n",
            " [0.74898887 0.7492615  0.7499177  0.7549527  0.79592085]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print( *[(label, info) for (label, info) in zip( business_data['bert_labels'][:10].tolist(), business_data['business_info'][:10].tolist())], sep='\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NBUmqotv69Dv",
        "outputId": "12ec35fb-3929-4c81-9e91-606f8bf71094"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(['Residential Communication Equipment Installation', 'Commercial Communication Equipment Installation', 'Pipeline Construction Services', 'Fire Safety Equipment Services'], 'civil engineering construction company specializes designing building network across offer solution gas water installation single contract design team designing water gas network network meter location development well project management provide custom solution take account asset every meet project expertise gas variety market category including residential commercial industrial project well construction service network design construction water installation fiber installation service civil engineering service heavy civil engineering construction')\n",
            "(['Bakery Production Services'], 'vegetable specialist also known company based japan specializes sale vegetable business year offer collection vegetable recipe vegetable recipe collection online shop company owned farm farm farm offer variety vegetable product including also production cultivation customer limited company us experience production sale provide vegetable meet customer need also cultivation product requirement wholesale product iron product manufacturer manufacturing technology food beverage rice highquality iron rice wholesaler miscellaneous crop farming health wellness product agricultural medical practice based medicine production rice manufacturing fruit vegetable market store frozen fruit vegetable manufacturing')\n",
            "(['Bakery Production Services'], 'company offer range service product customer product handmade quality focus quality company product range includes fresh vegetable farm shop addition farm product also farm shop customer fresh coffee cake living form farm fresh coffee community engagement social opportunity fresh vegetable cake living handmade product fresh farm fresh product integrated farming community farming manufacturing farm agriculture production miscellaneous crop farming')\n",
            "(['Boiler Repair Services'], 'auto body shop located province company specializes providing auto body repair service automotive body repair service interior repair service service auto body shop automotive body paint interior repair maintenance')\n",
            "(['Fencing Construction Services'], 'cultural establishment located popular level offering variety activity event establishment cultural activity accommodation service rental small product tourism service recreational activity cultural center service boat tour transportation water')\n",
            "(['Food Processing Services'], 'company specializes benefit individual business structure three large company food sector year experience extensive knowledge field company aim market quality service customer employee benefit food program offer wide network establishment provides employee healthy food option card travel app allows user card well daily healthy food option establishment daily service benefit payment solution benefit generation food card personalized benefit strategy service payment processing sale financial processing activity')\n",
            "(['Residential Communication Equipment Installation', 'Commercial Communication Equipment Installation', 'Fire Protection System Services', 'Fire Safety Equipment Services'], 'company provides personalized industrial general management service water compliance need offer specialist meet need smart account service include water plan onsite monitoring implementation plan site also provide customized inspection form meet facility need founded compliance expert experience various industry transportation metal fabrication scrap metal plastic film food processing oil gas wood mill provide solution ensure requirement additionally offer smart data report report report source control inspection event form management state water board smart service environmental engineering service environmental consulting service')\n",
            "(['Grain Handling Machinery Installation', 'Carpet Manufacturing Services'], 'form ltd company based specializing supply concrete product cut sheet installation service manufacturer full installation video concrete product manufacturing light service installation guide construction material manufacturing light manufacturing building material manufacturer wood member manufacturing')\n",
            "(['Grain Handling Machinery Installation'], 'company specializes production distribution packaging material including cardboard wholesale packaging packaging supply also offer packaging service packaging solution wholesale package packaging wholesale paper cardboard product industrial personal service paper merchant wholesaler')\n",
            "(['Bakery Production Services'], 'event company restaurant supply store located india company specializes providing supply restaurant event management service event organization service restaurant supply store wholesale restaurant equipment commercial equipment merchant wholesaler')\n"
          ]
        }
      ]
    }
  ]
}